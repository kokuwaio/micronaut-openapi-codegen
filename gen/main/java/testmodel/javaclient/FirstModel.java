/*
 * Spec for api tests.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package testmodel.javaclient;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import testmodel.javaclient.SecondLevelModel;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * FirstModel
 */
@JsonPropertyOrder({
  FirstModel.JSON_PROPERTY_TYPE,
  FirstModel.JSON_PROPERTY_FIRST,
  FirstModel.JSON_PROPERTY_SECOND_LEVEL
})
@java.lang.SuppressWarnings("all")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FirstModel {
  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_FIRST = "first";
  private String first;

  public static final String JSON_PROPERTY_SECOND_LEVEL = "secondLevel";
  private SecondLevelModel secondLevel;

  public FirstModel() {
  }

  public FirstModel type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public FirstModel first(String first) {
    
    this.first = first;
    return this;
  }

   /**
   * Get first
   * @return first
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIRST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFirst() {
    return first;
  }


  @JsonProperty(JSON_PROPERTY_FIRST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFirst(String first) {
    this.first = first;
  }


  public FirstModel secondLevel(SecondLevelModel secondLevel) {
    
    this.secondLevel = secondLevel;
    return this;
  }

   /**
   * Get secondLevel
   * @return secondLevel
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECOND_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SecondLevelModel getSecondLevel() {
    return secondLevel;
  }


  @JsonProperty(JSON_PROPERTY_SECOND_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecondLevel(SecondLevelModel secondLevel) {
    this.secondLevel = secondLevel;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FirstModel firstModel = (FirstModel) o;
    return Objects.equals(this.type, firstModel.type) &&
        Objects.equals(this.first, firstModel.first) &&
        Objects.equals(this.secondLevel, firstModel.secondLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, first, secondLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FirstModel {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    first: ").append(toIndentedString(first)).append("\n");
    sb.append("    secondLevel: ").append(toIndentedString(secondLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

