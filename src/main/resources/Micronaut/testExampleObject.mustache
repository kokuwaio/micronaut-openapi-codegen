package {{package}};
{{#models}}

public class {{classname}}TestExample {
{{#model}}

	public static {{classname}} build() {
		{{#isEnum}}
		return {{classname}}.values()[0];
		{{/isEnum}}
		{{^isEnum}}
		{{^vendorExtensions.x-is-one-of-interface}}
		{{^discriminator}}
		{{classname}} exampleInstance = new {{classname}}();
		{{#allVars}}
		{{#isEnum}}
		exampleInstance.set{{nameInPascalCase}}({{classname}}.{{datatypeWithEnum}}.toEnum({{{example}}}));
		{{/isEnum}}
		{{#isModel}}
		{{^isPrimitiveType}}
		exampleInstance.set{{nameInPascalCase}}({{{example}}});
		{{/isPrimitiveType}}
		exampleInstance.set{{nameInPascalCase}}({{baseType}}TestExample.build());
		{{/isModel}}
		{{^isEnum}}
		{{^isModel}}
		exampleInstance.set{{nameInPascalCase}}({{>testExampleObjectPropertyExample}});
		{{/isModel}}
		{{/isEnum}}
		{{/allVars}}
		return exampleInstance;
		{{/discriminator}}
		{{#discriminator}}
		{{#discriminator.mappedModels}}
		{{#-first}}
		return {{{modelName}}}TestExample.build();
		{{/-first}}
		{{/discriminator.mappedModels}}
		{{/discriminator}}
		{{/vendorExtensions.x-is-one-of-interface}}
		{{/isEnum}}
		{{#vendorExtensions.x-is-one-of-interface}}
		{{^discriminator}}
		{{#interfaceModels}}
		{{#-first}}
		return {{{classname}}}TestExample.build();
		{{/-first}}
		{{/interfaceModels}}
		{{^interfaceModels}}
		return null;
		{{/interfaceModels}}
		{{/discriminator}}
		{{#discriminator}}
		{{#discriminator.mappedModels}}
		{{#-first}}
		return {{{modelName}}}TestExample.build();
		{{/-first}}
		{{/discriminator.mappedModels}}
		{{/discriminator}}
		{{/vendorExtensions.x-is-one-of-interface}}
	}{{/model}}
}
{{/models}}
