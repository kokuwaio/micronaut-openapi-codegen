{{^vendorExtensions.x-is-one-of-interface}}{{#discriminator}}@com.fasterxml.jackson.annotation.JsonTypeInfo(use = com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME, include = com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXISTING_PROPERTY, property = {{classname}}.JSON_DISCRIMINATOR)
@com.fasterxml.jackson.annotation.JsonSubTypes({
	{{#discriminator.mappedModels}}
	@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = {{modelName}}.class, name = "{{^vendorExtensions.x-discriminator-value}}{{mappingName}}{{/vendorExtensions.x-discriminator-value}}{{#vendorExtensions.x-discriminator-value}}{{{vendorExtensions.x-discriminator-value}}}{{/vendorExtensions.x-discriminator-value}}"){{^-last}},{{/-last}}
	{{/discriminator.mappedModels}}
})
{{/discriminator}}{{^discriminator}}@com.fasterxml.jackson.databind.annotation.JsonDeserialize(as = {{classname}}Default.class)
{{/discriminator}}
public interface {{classname}}{{#interfaces}}{{#-first}} extends {{{.}}}{{/-first}}{{^-first}}, {{{.}}}{{/-first}}{{/interfaces}} {
{{#discriminator}}

	java.lang.String JSON_DISCRIMINATOR = "{{propertyBaseName}}";{{/discriminator}}{{#vars}}
	java.lang.String JSON_PROPERTY_{{nameInSnakeCase}} = "{{baseName}}";{{/vars}}{{#discriminator}}

	@com.fasterxml.jackson.annotation.JsonProperty(JSON_DISCRIMINATOR)
	{{discriminator.propertyType}} {{discriminator.propertyGetter}}();{{/discriminator}}{{#vendorExtensions.additionalPropertiesMap}}
	@com.fasterxml.jackson.annotation.JsonAnyGetter
	java.util.Map<{{{vendorExtensions.additionalPropertiesMap.keyType}}}, {{{vendorExtensions.additionalPropertiesMap.valueType}}}> getAdditionalProperties();

	@com.fasterxml.jackson.annotation.JsonAnySetter
	void setAdditionalProperties({{{vendorExtensions.additionalPropertiesMap.keyType}}} propertyKey,{{{vendorExtensions.additionalPropertiesMap.valueType}}} value);
{{/vendorExtensions.additionalPropertiesMap}}{{#hasVars}}{{#vars}}

{{#description}}	/** {{description}} */
{{/description}}{{>modelPropertyJackson}}
	{{>modelPropertyType}} {{getter}}();

	@com.fasterxml.jackson.annotation.JsonProperty(JSON_PROPERTY_{{nameInSnakeCase}})
	void {{setter}}({{>modelPropertyType}} new{{nameInCamelCase}});{{/vars}}{{#vars}}{{#isEnum}}

{{>modelEnum}}{{/isEnum}}{{/vars}}{{/hasVars}}
}{{/vendorExtensions.x-is-one-of-interface}}{{#vendorExtensions.x-is-one-of-interface}}{{^discriminator}}@com.fasterxml.jackson.annotation.JsonTypeInfo(use = com.fasterxml.jackson.annotation.JsonTypeInfo.Id.DEDUCTION, visible = true)
@com.fasterxml.jackson.annotation.JsonSubTypes({
	{{#oneOf}}
	@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = {{{.}}}.class){{^-last}},{{/-last}}
	{{/oneOf}}
})
{{/discriminator}}{{#discriminator}}@com.fasterxml.jackson.annotation.JsonTypeInfo(use = com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME, include = com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXISTING_PROPERTY, property = {{classname}}.JSON_DISCRIMINATOR)
@com.fasterxml.jackson.annotation.JsonSubTypes({
	{{#discriminator.mappedModels}}
	@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = {{modelName}}.class, name = "{{^vendorExtensions.x-discriminator-value}}{{mappingName}}{{/vendorExtensions.x-discriminator-value}}{{#vendorExtensions.x-discriminator-value}}{{{vendorExtensions.x-discriminator-value}}}{{/vendorExtensions.x-discriminator-value}}"),
	{{/discriminator.mappedModels}}
})
{{/discriminator}}
public interface {{classname}}{{#vendorExtensions.x-implements}}{{#-first}} extends {{{.}}}{{/-first}}{{^-first}}, {{{.}}}{{/-first}}{{/vendorExtensions.x-implements}}{{^discriminator}} {}{{/discriminator}}{{#discriminator}} {
{{#discriminator}}

	java.lang.String JSON_DISCRIMINATOR = "{{propertyBaseName}}";{{/discriminator}}

	@com.fasterxml.jackson.annotation.JsonProperty(JSON_DISCRIMINATOR)
	{{discriminator.propertyType}} {{discriminator.propertyGetter}}();
}{{/discriminator}}{{/vendorExtensions.x-is-one-of-interface}}