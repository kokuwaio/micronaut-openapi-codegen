{{#discriminator}}@com.fasterxml.jackson.annotation.JsonTypeInfo(use = com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME, include = com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXISTING_PROPERTY, property = {{classname}}.JSON_DISCRIMINATOR)
@com.fasterxml.jackson.annotation.JsonSubTypes({
	{{#discriminator.mappedModels}}
	@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = {{modelName}}.class, name = "{{^vendorExtensions.x-discriminator-value}}{{mappingName}}{{/vendorExtensions.x-discriminator-value}}{{#vendorExtensions.x-discriminator-value}}{{{vendorExtensions.x-discriminator-value}}}{{/vendorExtensions.x-discriminator-value}}"),
	{{/discriminator.mappedModels}}
})
{{/discriminator}}{{#introspected}}@io.micronaut.core.annotation.Introspected
{{/introspected}}
public {{#discriminator}}abstract {{/discriminator}}class {{classname}}{{#parent}} extends {{{parent}}}{{/parent}} {

{{#vars}}
	public static final String JSON_PROPERTY_{{nameInSnakeCase}} = "{{baseName}}";
{{/vars}}{{#discriminator}}	public static final String JSON_DISCRIMINATOR = "{{discriminatorName}}";
{{/discriminator}}

{{#vars}}{{#description}}	/** {{description}} */
{{/description}}{{#useBeanValidation}}{{>modelPropertyValidation}}{{/useBeanValidation}}{{>modelPropertyJackson}}
	private {{>modelPropertyType}} {{name}}{{>modelPropertyDefault}};

{{/vars}}{{#vendorExtensions.additionalPropertiesMap}}
	private {{{vendorExtensions.additionalPropertiesMap}}} additionalProperties;
{{/vendorExtensions.additionalPropertiesMap}}
{{#discriminator}}
	@com.fasterxml.jackson.annotation.JsonProperty(JSON_DISCRIMINATOR)
	public abstract {{discriminator.propertyType}} {{discriminator.propertyGetter}}();

{{/discriminator}}{{#vendorExtensions.discriminatorPropertyValue}}
	public {{vendorExtensions.discriminatorPropertyType}} {{vendorExtensions.discriminatorPropertyGetter}}() {
		return {{{vendorExtensions.discriminatorPropertyValue}}};
	}

{{/vendorExtensions.discriminatorPropertyValue}}

	// methods

	@Override
	public boolean equals(Object object) {
		if (object == this) {
			return true;
		}
		if (object == null || getClass() != object.getClass()) {
			return false;
		}
		{{classname}} other = ({{classname}}) object;
		return {{^vars}}{{#discriminator}}java.util.Objects.equals({{discriminator.propertyGetter}}(), other.{{discriminator.propertyGetter}}());{{/discriminator}}{{^discriminator}}super.equals(object);{{/discriminator}}{{/vars}}{{#vars}}{{^isByteArray}}java.util.Objects{{/isByteArray}}{{#isByteArray}}java.util.Arrays{{/isByteArray}}.equals({{name}}, other.{{name}}){{^-last}}
				&& {{/-last}}{{#-last}}{{#discriminator}}
				&& java.util.Objects.equals({{discriminator.propertyGetter}}(), other.{{discriminator.propertyGetter}}()){{/discriminator}}{{#parent}}
				&& super.equals(object){{/parent}};{{/-last}}{{/vars}}
	}

	@Override
	public int hashCode() {
		return java.util.Objects.hash({{^vars}}{{#discriminator}}{{discriminator.propertyGetter}}(){{/discriminator}}{{/vars}}{{#vars}}{{^isByteArray}}{{name}}{{/isByteArray}}{{#isByteArray}}java.util.Arrays.hashCode({{name}}){{/isByteArray}}{{^-last}}, {{/-last}}{{#-last}}{{#discriminator}}, {{discriminator.propertyGetter}}(){{/discriminator}}{{#parent}}, super.hashCode(){{/parent}}{{/-last}}{{/vars}});
	}

	@Override
	public String toString() {
		return new StringBuilder()
				.append("{{classname}}["){{#parent}}
				.append("super").append(super.toString()){{/parent}}
		{{#vars}}		.append("{{name}}{{^isByteArray}}=").append({{name}}{{/isByteArray}}{{#isByteArray}}.length=").append({{name}} == null ? null : {{name}}.length{{/isByteArray}}){{^-last}}.append(","){{/-last}}
		{{/vars}}		.append("]")
				.toString();
	}

	// fluent
	{{#vars}}

	public {{classname}} {{name}}({{>modelPropertyType}} new{{nameInCamelCase}}) {
		this.{{name}} = new{{nameInCamelCase}};
		return this;
	}

	public {{>modelPropertyType}} {{name}}() {
		return {{name}};
	}
	{{/vars}}


	// getter/setter{{#vendorExtensions.additionalPropertiesMap}}

	@com.fasterxml.jackson.annotation.JsonAnyGetter
	public {{{vendorExtensions.additionalPropertiesMap}}} getAdditionalProperties() {
		return additionalProperties;
	}

	@com.fasterxml.jackson.annotation.JsonAnySetter
	public {{classname}} setAdditionalProperties({{{vendorExtensions.additionalPropertiesMap}}} newAdditionalProperties) {
		this.additionalProperties = newAdditionalProperties;
		return this;
	}
	{{/vendorExtensions.additionalPropertiesMap}}
	{{#vars}}

	public {{>modelPropertyType}} {{getter}}() {
		return {{name}};
	}

	public {{classname}} {{setter}}({{>modelPropertyType}} new{{nameInCamelCase}}) {
		this.{{name}} = new{{nameInCamelCase}};
		return this;
	}

	{{#isContainer}}
	public {{classname}} {{#isArray}}add{{/isArray}}{{#isMap}}put{{/isMap}}{{nameInCamelCase}}Item({{#isMap}}String key, {{/isMap}}{{{items.datatypeWithEnum}}} {{name}}Item) {
		{{#isNullable}}
			{{#jacksonDatabindNullable}}
		if (this.{{name}} == null || !this.{{name}}.isPresent()) {
			this.{{name}} = org.openapitools.jackson.nullable.JsonNullable.<{{{datatypeWithEnum}}}>of({{{defaultValue}}});
		}
		this.{{name}}.get().{{#isArray}}add({{/isArray}}{{#isMap}}put(key, {{/isMap}}{{name}}Item);
			{{/jacksonDatabindNullable}}
			{{^jacksonDatabindNullable}}
		if (this.{{name}} == null) {
			this.{{name}} = {{{defaultValue}}};
		}
		this.{{name}}.{{#isArray}}add({{/isArray}}{{#isMap}}put(key, {{/isMap}}{{name}}Item);
			{{/jacksonDatabindNullable}}
		{{/isNullable}}
		{{^isNullable}}
		if (this.{{name}} == null) {
			this.{{name}} = {{{defaultValue}}};
		}
		this.{{name}}.{{#isArray}}add({{/isArray}}{{#isMap}}put(key, {{/isMap}}{{name}}Item);
		{{/isNullable}}
		return this;
	}
	{{/isContainer}}
    {{/vars}}

    {{#visitable}}
    {{#discriminator}}
    /**
     * Accept the visitor and invoke it for the specific {{classname}} type.
     *
     * @param visitor the {{classname}} visitor
     * @param <T> the return type of the visitor
     * @return the result from the visitor
     */
    public abstract <T> T accept(Visitor<T> visitor);

    /**
     * A {{classname}} visitor implementation allows visiting the various {{classname}} types.
     *
     * @param <R> the return type of the visitor
     */
    public interface Visitor<R> {
        {{#discriminator.mappedModels}}
        public R visit{{modelName}}({{modelName}} value);
        {{/discriminator.mappedModels}}
    }
    {{/discriminator}}

    {{#parent}}
        {{#interfaces.0}}
    @Override
    public <T> T accept({{{parent}}}.Visitor<T> visitor) {
        return visitor.visit{{classname}}(this);
    }
        {{/interfaces.0}}
    {{/parent}}
    {{/visitable}}

    {{#vars}}{{#isEnum}}

{{>modelEnum}}{{/isEnum}}{{/vars}}
}