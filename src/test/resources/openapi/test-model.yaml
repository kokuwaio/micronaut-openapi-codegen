openapi: 3.0.3
info:
  title: Spec for api tests.
  version: "1"
paths: {}
components:
  schemas:

    ###
    ### Model
    ###

    Model:
      type: object
      required:
        - name
        - array
        - map
        - set
      properties:
        id:
          type: integer
          format: int32
        idWithExample:
          type: integer
          format: int32
          example: 32
        idWithDefault:
          type: integer
          format: int32
          default: 32
        name:
          type: string
          maxLength: 36
        nameWithExample:
          type: string
          example: MyExampleName
        nameWithDefault:
          type: string
          default: MyDefaultName
        date:
          type: string
          format: date
        dateWithExample:
          type: string
          format: date
          example: "2022-02-02"
        date-time:
          type: string
          format: date-time
        date-timeWithExample:
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"
        number:
          type: number
        binary:
          type: string
          format: binary
        bytes:
          type: string
          format: byte
        any: {}
        array:
          type: array
          items:
            type: string
        arrayWithExample:
          type: array
          items:
            type: string
          example:
            - a
            - b
            - b
        set:
          type: array
          items:
            type: string
          uniqueItems: true
        setWithExamples:
          type: array
          items:
            type: string
          uniqueItems: true
          example:
            - a
            - b
            - c
        map:
          type: string
          additionalProperties:
            type: string
        mapWithExample:
          type: string
          additionalProperties:
            type: string
          example:
            a: b
            c: d
        optionalArray:
          type: array
          items:
            type: string
        optionalSet:
          type: array
          items:
            type: string
          uniqueItems: true
        optionalMap:
          type: string
          additionalProperties:
            type: string
        nullableString:
          type: string
          nullable: true
        nullableArray:
          type: array
          nullable: true
          items:
            type: string
        nullableSet:
          type: array
          nullable: true
          items:
            type: string
          uniqueItems: true
        # not supported by any codegen
        # nullableMap:
        #   type: string
        #   nullable: true
        #   additionalProperties:
        #     type: string
        defaultString:
          type: string
          default: defaultStringValue
        defaultInteger:
          type: integer
          format: int32
          default: 1234
        defaultLong:
          type: integer
          format: int64
          default: 5678
        defaultNullable:
          type: string
          default: defaultNullableValue
          nullable: true
        referenedModel:
          $ref: "#/components/schemas/EnumerationModel"

    ###
    ### Enumerations
    ###

    EnumerationModel:
      type: object
      properties:
        string:
          $ref: "#/components/schemas/EnumerationString"
        string-default:
          $ref: "#/components/schemas/EnumerationStringDefault"
        embedded:
          type: string
          enum:
            - first
            - second
        embedded-default:
          type: string
          enum:
            - three
            - four
          default: four
    EnumerationString:
      type: string
      enum:
        - one
        - two
    EnumerationStringDefault:
      type: string
      enum:
        - three
        - four
      default: three
    EnumerationInteger:
      type: integer
      enum:
        - -2147483648
        - -1
        - 0
        - 1
        - 2147483647
    EnumerationNumber:
      type: number
      enum:
        - -1
        - 0
        - 1

    ###
    ### Simple Inheritance
    ###

    InheritanceSimple:
      properties:
        foo:
          type: string
      required:
        - foo
    InheritanceExtended:
      allOf:
        - $ref: "#/components/schemas/InheritanceSimple"
        - properties:
            bar:
              type: string
          required:
            - bar

    ###
    ### Complex inheritance without type property
    ###

    InheritanceWithoutType:
      discriminator:
        propertyName: type
        mapping:
          Inheritance1: "#/components/schemas/InheritanceWithoutType1"
          Inheritance2: "#/components/schemas/InheritanceWithoutType2"
      properties:
        e:
          type: string
    InheritanceWithoutType1:
      allOf:
        - $ref: "#/components/schemas/InheritanceWithoutType"
        - properties:
            f:
              type: string
    InheritanceWithoutType2:
      allOf:
        - $ref: "#/components/schemas/InheritanceWithoutType"
        - properties:
            g:
              type: string

    ###
    ### Inheritance with string type property
    ###

    InheritanceWithStringType:
      discriminator:
        propertyName: type
        mapping:
          Inheritance1: "#/components/schemas/InheritanceWithStringType1"
          Inheritance2: "#/components/schemas/InheritanceWithStringType2"
      properties:
        type:
          type: string
        a:
          type: string
    InheritanceWithStringType1:
      allOf:
        - $ref: "#/components/schemas/InheritanceWithStringType"
        - properties:
            b:
              type: string
    InheritanceWithStringType2:
      allOf:
        - $ref: "#/components/schemas/InheritanceWithStringType"
        - properties:
            c:
              type: string

    ###
    ### Inheritance with enum type property
    ###

    InheritanceWithEnumTypeEnum:
      type: string
      enum:
        - Inheritance1
        - Inheritance2
        - Inheritance3
    InheritanceWithEnumType:
      discriminator:
        propertyName: type
        mapping:
          Inheritance1: "#/components/schemas/InheritanceWithEnumType1"
          Inheritance2: "#/components/schemas/InheritanceWithEnumType2"
          Inheritance3: "#/components/schemas/InheritanceWithEnumType3"
      properties:
        type:
          $ref: "#/components/schemas/InheritanceWithEnumTypeEnum"
    InheritanceWithEnumType1:
      allOf:
        - $ref: "#/components/schemas/InheritanceWithEnumType"
        - properties:
            d:
              type: string
    InheritanceWithEnumType2:
      allOf:
        - $ref: "#/components/schemas/InheritanceWithEnumType"
        - properties:
            e:
              type: string
    InheritanceWithEnumType3:
      allOf:
        - $ref: "#/components/schemas/InheritanceWithEnumType"

    ###
    ### Multi-Level OneOf
    ###

    OneOfModel:
      oneOf:
        - $ref: "#/components/schemas/FirstModel"
        - $ref: "#/components/schemas/SecondLevelModel"

    FirstModel:
      type: object
      properties:
        type:
          type: string
        first:
          type: string
        secondLevel:
          $ref: "#/components/schemas/SecondLevelModel"

    SecondLevelModel:
      oneOf:
        - $ref: "#/components/schemas/SecondLevelOneModel"
        - $ref: "#/components/schemas/SecondLevelTwoModel"


    SecondLevelOneModel:
      type: object
      properties:
        type:
          type: string
        one:
          type: string

    SecondLevelTwoModel:
      type: object
      properties:
        type:
          type: string
        two:
          type: string

    ##
    ## OneOf with discriminator
    ##
    OneOfInterface:
      type: object
      discriminator:
        propertyName: type
        mapping:
          Implementation1: "#/components/schemas/OneOfImplementor1"
          Implementation2: "#/components/schemas/OneOfImplementor2"
      properties:
        type:
          type: string
      oneOf:
        - $ref: "#/components/schemas/OneOfImplementor1"
        - $ref: "#/components/schemas/OneOfImplementor2"

    OneOfImplementor1:
      type: object
      properties:
        property:
          type: string

    OneOfImplementor2:
      type: object
      properties:
        property:
          type: number

    ##
    ## Model with additional properties
    ##
    PropertyTypeOne:
      type: object
      properties:
        type:
          type: string
          enum:
            - one

    PropertyTypeTwo:
      type: object
      properties:
        type:
          type: string
          enum:
            - two

    AdditionalPropertiesModel:
      type: object
      properties:
        id:
          type: string
      additionalProperties:
        oneOf:
          - $ref: "#/components/schemas/PropertyTypeOne"
          - $ref: "#/components/schemas/PropertyTypeTwo"
