openapi: 3.0.2
info:
  title: Test Spec
  version: '0.6'
servers:
- url: http://localhost:8080
paths:
  /response/void:
    get:
      operationId: voidNormal
      tags:
      - response
      responses:
        204:
          description: Ok.
  /response/void-notfound:
    get:
      operationId: voidNotFound
      parameters:
      - name: found
        in: query
        required: true
        schema:
          type: boolean
      tags:
      - response
      responses:
        204:
          description: Ok.
        404:
          description: Ok.
  /response/single:
    get:
      operationId: single
      tags:
      - response
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: string
  /response/optional:
    get:
      operationId: optional
      tags:
      - response
      parameters:
      - name: found
        in: query
        required: true
        schema:
          type: boolean
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: string
        404:
          description: Ok.
  /response/header:
    get:
      operationId: header
      tags:
      - response
      responses:
        200:
          description: Ok.
          headers:
            foo:
              schema:
                type: number
  /response/array:
    get:
      operationId: array
      tags:
      - response
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /response/array-notfound:
    get:
      operationId: arrayNotFound
      parameters:
      - name: found
        in: query
        required: true
        schema:
          type: boolean
      tags:
      - response
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        404:
          description: Ok.
  /response/multiple:
    get:
      operationId: multiple
      parameters:
      - name: redirect
        in: query
        required: true
        schema:
          type: boolean
      tags:
      - response
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMultiple200'
        300:
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMultiple300'
  /response/multiple-notfound:
    get:
      operationId: multipleNotFound
      parameters:
      - name: redirect
        in: query
        required: true
        schema:
          type: boolean
      - name: found
        in: query
        required: true
        schema:
          type: boolean
      tags:
      - response
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMultiple200'
        300:
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMultiple300'
        404:
          description: Ok.
  /model:
    get:
      description: 'Get list of models'
      operationId: findAll
      tags:
      - model
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Model'
    post:
      description: 'Create model'
      operationId: create
      tags:
      - model
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
      responses:
        201:
          description: Created.
          headers:
            Location:
              description: URL to the resource
              schema:
                type: string
                format: uri
        409:
          description: Conflict.
  /model/{modelId}:
    parameters:
    - name: modelId
      in: path
      required: true
      schema:
        type: integer
        format: int32
    get:
      description: 'Get model'
      operationId: findById
      tags:
      - model
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        404:
          description: NotFound.
    delete:
      description: 'Delete model'
      operationId: delete
      tags:
      - model
      responses:
        204:
          description: Deleted.
        404:
          description: NotFound.
  /model/inheritance:
    get:
      operationId: getInheritance
      tags:
      - model
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: object
                required:
                - list
                properties:
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/InheritanceModel'
    put:
      operationId: putInheritanceList
      tags:
      - model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/InheritanceModel'
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /query/multiple-lists:
    get:
      operationId: getMultipleLists
      parameters:
      - name: a
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      - name: b
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      tags:
      - query
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryModel'
  /query/type/date:
    get:
      operationId: getTypeDate
      parameters:
      - name: date
        in: query
        required: false
        schema:
          type: string
          format: date
      tags:
      - query
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryModel'
  /query/type/date-time:
    get:
      operationId: getTypeDateTime
      parameters:
      - name: date-time
        in: query
        required: false
        schema:
          type: string
          format: date-time
      tags:
      - query
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryModel'
  /query/type/number:
    get:
      operationId: getTypeNumber
      parameters:
      - name: number
        in: query
        required: false
        schema:
          type: number
      tags:
      - query
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryModel'
  /query/type/uuid:
    get:
      operationId: getUuid
      parameters:
      - name: number
        in: query
        required: false
        schema:
          type: string
          format: uuid
      tags:
      - query
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryModel'
  /uri/{uuid}:
    get:
      operationId: uriWithUuid
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      tags:
      - uri
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: string
  /uri/{uuid1}/{uuid2}:
    get:
      operationId: uriWithMultipleUuids
      parameters:
      - name: uuid1
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: uuid2
        in: path
        required: true
        schema:
          type: string
          format: uuid
      tags:
      - uri
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: string
  /uri/{string}:
    get:
      operationId: uriWithString
      parameters:
      - name: string
        in: path
        required: true
        schema:
          type: string
          maxLength: 10
      tags:
      - uri
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: string
  /mediatype/post-plain:
    post:
      operationId: mediatypePostPlain
      tags:
      - mediatype
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: object
                properties:
                  string:
                    type: string
                required:
                - string
  /mediatype/post-octet-stream:
    post:
      operationId: mediatypePostOctetStream
      tags:
      - mediatype
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: object
                properties:
                  binary:
                    type: string
                    format: binary
                required:
                - binary
  /mediatype/post-multipart:
    post:
      # see https://swagger.io/docs/specification/describing-request-body/file-upload/
      operationId: mediatypePostMultipart
      tags:
      - mediatype
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                orderId:
                  type: integer
                userId:
                  type: integer
                fileName:
                  type: string
                  format: binary
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: integer
                  userId:
                    type: integer
                  fileName:
                    type: string
                  file:
                    type: string
                    format: byte
                required:
                - orderId
                - userId
                - fileName
                - file
  /mediatype/multiple-contenttypes:
    post:
      operationId: mediatypeMultipleContentTypes
      tags:
      - mediatype
      parameters:
      - name: plain
        in: query
        required: true
        schema:
          type: boolean
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: object
                properties: 
                  value:
                    type: string
            text/plain:
              schema:
                type: string
components:
  schemas:
    StringEnumeration:
      type: string
      enum:
      - one
      - two
    IntegerEnumeration:
      type: integer
      enum:
      - -2147483648
      - -1
      - 0
      - 1
      - 2147483647
    NumberEnumeration:
      type: number
      enum:
      - -1
      - 0
      - 1
    Model:
      type: object
      required:
      - name
      - array
      - map
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          maxLength: 36
        date:
          type: string
          format: date
        timestamp:
          type: string
          format: date-time
        number:
          type: number
        binary:
          type: string
          format: binary
        bytes:
          type: string
          format: byte
        any: {}
        array:
          type: array
          items:
            type: string
        map:
          type: string
          additionalProperties:
            type: string
        nullableString:
          type: string
          nullable: true
        nullableArray:
          type: array
          nullable: true
          items:
            type: string
        modelEnumeration:
          $ref: '#/components/schemas/StringEnumeration'
        embeddedEnumeration:
          type: string
          enum:
          - first
          - second
        defaultString:
          type: string
          default: defaultStringValue
        defaultInteger:
          type: integer
          format: int64
          default: 1234
        defaultEnumeration:
          type: string
          enum:
          - foo
          - bar
          default: bar
        defaultNullable:
          type: string
          default: defaultNullableValue
          nullable: true
    InheritanceModel:
      discriminator:
        propertyName: type
        mapping:
          InheritanceModel1: '#/components/schemas/InheritanceModel1'
          InheritanceModel2: '#/components/schemas/InheritanceModel2'
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
    InheritanceModel1:
      allOf:
      - $ref: '#/components/schemas/InheritanceModel'
      - properties:
          a:
            type: string
    InheritanceModel2:
      allOf:
      - $ref: '#/components/schemas/InheritanceModel'
      - properties:
          b:
            type: string
    InheritanceModelType:
      type: string
      enum:
      - InheritanceModel1
      - InheritanceModel2
      - InheritanceModel3
    InheritanceModelWithType:
      discriminator:
        propertyName: type
        mapping:
          InheritanceModel1: '#/components/schemas/InheritanceModelWithType1'
          InheritanceModel2: '#/components/schemas/InheritanceModelWithType2'
          InheritanceModel3: '#/components/schemas/InheritanceModelWithType3'
      properties:
        type:
          $ref: '#/components/schemas/InheritanceModelType'
    InheritanceModelWithType1:
      allOf:
      - $ref: '#/components/schemas/InheritanceModelWithType'
      - properties:
          a:
            type: string
    InheritanceModelWithType2:
      allOf:
      - $ref: '#/components/schemas/InheritanceModelWithType'
      - properties:
          b:
            type: string
    InheritanceModelWithType3:
      allOf:
      - $ref: '#/components/schemas/InheritanceModelWithType2'
      - properties:
          c:
            type: string
    QueryModel:
      type: object
      properties:
        number: 
          type: number
        uuid:
          type: string
          format: uuid
        date:
          type: string
          format: date
        dateTime:
          type: string
          format: date-time
        a:
          type: array
          items:
            type: string
        b:
          type: array
          items:
            type: string
    ResponseMultiple200:
      type: object
      properties:
        foo: 
          type: string
    ResponseMultiple300:
      type: object
      properties:
        bar: 
          type: number
